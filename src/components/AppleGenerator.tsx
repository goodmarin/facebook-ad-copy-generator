import React, { useState, useEffect, useRef, useMemo } from 'react';
import { OutputDisplay } from './OutputDisplay';
import { PolicyCheckResult } from '../utils/policyChecker';
import { REGIONS } from '../utils/languages';
import { getAutoRegionGroups } from '../utils/regionGrouping';

interface ProductInfo {
  name: string;
  features: string;
  targetAudience: string;
  regions: string[];
  style: string;
  promotion: string;
}

interface AppleGeneratorProps {
  productInfo: ProductInfo;
  setProductInfo: React.Dispatch<React.SetStateAction<ProductInfo>>;
  copies: Array<{text: string, region: string, regionName: string}>;
  isLoading: boolean;
  onGenerate: () => void;
  showRegionError: boolean;
  setShowRegionError: React.Dispatch<React.SetStateAction<boolean>>;
  error: string | null;
  isForbiddenProduct?: boolean;
  policyCheckResult?: PolicyCheckResult | null;
}

export const AppleGenerator: React.FC<AppleGeneratorProps> = ({ 
  productInfo, 
  setProductInfo, 
  copies, 
  isLoading, 
  onGenerate,
  showRegionError,
  setShowRegionError,
  error,
  isForbiddenProduct,
  policyCheckResult
}) => {
  const [showRegionDropdown, setShowRegionDropdown] = useState(false);
  const [regionSearchTerm, setRegionSearchTerm] = useState('');
  const [focusedField, setFocusedField] = useState<string | null>(null);
  const [showQuickTemplates, setShowQuickTemplates] = useState(false);
  
  // Â∑¶Âè≥ÂàóÁ≠âÈ´òÂØπÈΩêÔºàÂÆûÊó∂Ôºâ
  const leftCardRef = useRef<HTMLDivElement | null>(null);
  const rightCardRef = useRef<HTMLDivElement | null>(null);
  
  useEffect(() => {
    if (!leftCardRef.current || !rightCardRef.current) return;
    
    const syncHeights = () => {
      if (!leftCardRef.current || !rightCardRef.current) return;
      // ÂÖàÊ∏ÖÈô§‰ª•Ëé∑ÂæóÂÜÖÂÆπËá™ÁÑ∂È´òÂ∫¶
      leftCardRef.current.style.minHeight = '';
      rightCardRef.current.style.minHeight = '';
      const leftH = leftCardRef.current.getBoundingClientRect().height;
      const rightH = rightCardRef.current.getBoundingClientRect().height;
      const maxH = Math.max(leftH, rightH);
      leftCardRef.current.style.minHeight = `${maxH}px`;
      rightCardRef.current.style.minHeight = `${maxH}px`;
    };
    
    const ro = new ResizeObserver(syncHeights);
    ro.observe(leftCardRef.current);
    ro.observe(rightCardRef.current);
    
    // ÂêåÊ≠•‰∏ÄÊ¨°
    syncHeights();
    
    // ÁõëÂê¨Á™óÂè£Â∞∫ÂØ∏ÂèòÂåñ
    window.addEventListener('resize', syncHeights);
    return () => {
      ro.disconnect();
      window.removeEventListener('resize', syncHeights);
    };
  }, [copies, isLoading, productInfo.regions, showRegionDropdown, showQuickTemplates]);

  // üöÄ Âø´ÈÄüÊ®°ÁâàÊï∞ÊçÆ
  const quickTemplates = [
    {
      id: 'smart-watch',
      name: 'üéØ Êô∫ËÉΩÊâãË°®',
      data: {
        name: 'Êô∫ËÉΩÂÅ•Â∫∑ÊâãË°®',
        features: 'ÂøÉÁéáÁõëÊµã„ÄÅÁù°Áú†ËøΩË∏™„ÄÅËøêÂä®Ê®°Âºè„ÄÅÈò≤Ê∞¥ËÆæËÆ°„ÄÅÈïøÁª≠Ëà™',
        targetAudience: 'ÂÅ•Ë∫´Áà±Â•ΩËÄÖ„ÄÅÂπ¥ËΩª‰∏äÁè≠Êóè„ÄÅÂÅ•Â∫∑ÊÑèËØÜÁî®Êà∑',
        style: 'energetic',
        promotion: 'flash'
      }
    },
    {
      id: 'wireless-earbuds',
      name: 'üéµ Êó†Á∫øËÄ≥Êú∫',
      data: {
        name: 'È´òÂìÅË¥®Êó†Á∫øËÄ≥Êú∫',
        features: '‰∏ªÂä®ÈôçÂô™„ÄÅHiFiÈü≥Ë¥®„ÄÅÂø´ÈÄüÂÖÖÁîµ„ÄÅÊô∫ËÉΩËß¶Êéß„ÄÅËàíÈÄÇ‰Ω©Êà¥',
        targetAudience: 'Èü≥‰πêÁà±Â•ΩËÄÖ„ÄÅÈÄöÂã§Êóè„ÄÅÂ≠¶ÁîüÁæ§‰Ωì',
        style: 'modern',
        promotion: 'discount'
      }
    },
    {
      id: 'skincare',
      name: 'üå∏ Êä§ËÇ§‰∫ßÂìÅ',
      data: {
        name: 'Â§©ÁÑ∂Êä§ËÇ§Á≤æÂçé',
        features: 'Ê∑±Â±ÇÊªãÊ∂¶„ÄÅÊäóÊ∞ßÂåñ„ÄÅÊ∏©Âíå‰∏çÂà∫ÊøÄ„ÄÅÂ§©ÁÑ∂ÊàêÂàÜ„ÄÅÂø´ÈÄüÂê∏Êî∂',
        targetAudience: 'Ê≥®ÈáçÊä§ËÇ§ÁöÑÂ•≥ÊÄß„ÄÅÊïèÊÑüËÇå‰∫∫Áæ§„ÄÅËøΩÊ±ÇÂ§©ÁÑ∂ÁöÑÁî®Êà∑',
        style: 'elegant',
        promotion: 'seasonal'
      }
    },
    {
      id: 'fitness-equipment',
      name: 'üí™ ÂÅ•Ë∫´Âô®Êùê',
      data: {
        name: 'ÂÆ∂Áî®Êô∫ËÉΩÂÅ•Ë∫´Âô®Êùê',
        features: 'Â§öÂäüËÉΩËÆ≠ÁªÉ„ÄÅÊô∫ËÉΩÊåáÂØº„ÄÅËäÇÁúÅÁ©∫Èó¥„ÄÅÈùôÈü≥ËÆæËÆ°„ÄÅ‰∏ì‰∏öÁ∫ßÂìÅË¥®',
        targetAudience: 'ÂÅ•Ë∫´Áà±Â•ΩËÄÖ„ÄÅÂ±ÖÂÆ∂ËøêÂä®ËÄÖ„ÄÅÂøôÁ¢åÁöÑ‰∏äÁè≠Êóè',
        style: 'confident',
        promotion: 'bundle'
      }
    },
    {
      id: 'smartphone',
      name: 'üì± Êô∫ËÉΩÊâãÊú∫',
      data: {
        name: '5GÊô∫ËÉΩÊâãÊú∫',
        features: 'È´òÊ∏ÖÊëÑÂÉè„ÄÅÂø´ÈÄüÂÖÖÁîµ„ÄÅÂ§ßÂÆπÈáèÂ≠òÂÇ®„ÄÅÊµÅÁïÖÊÄßËÉΩ„ÄÅÊó∂Â∞öËÆæËÆ°',
        targetAudience: 'Âπ¥ËΩªÁî®Êà∑„ÄÅÊëÑÂΩ±Áà±Â•ΩËÄÖ„ÄÅÁßëÊäÄËææ‰∫∫',
        style: 'modern',
        promotion: 'new'
      }
    },
    {
      id: 'coffee',
      name: '‚òï ÂíñÂï°‰∫ßÂìÅ',
      data: {
        name: 'Á≤æÂìÅÂíñÂï°Ë±Ü',
        features: 'Âçï‰∏Ä‰∫ßÂå∫„ÄÅÊñ∞È≤úÁÉòÁÑô„ÄÅÊµìÈÉÅÈ¶ôÂë≥„ÄÅÁ≤æÈÄâÂìÅË¥®„ÄÅÂ§öÁßçÂè£Âë≥',
        targetAudience: 'ÂíñÂï°Áà±Â•ΩËÄÖ„ÄÅÂìÅË¥®ÁîüÊ¥ªËøΩÊ±ÇËÄÖ„ÄÅÂäûÂÖ¨ÂÆ§‰∫∫Áæ§',
        style: 'lifestyle',
        promotion: 'loyalty'
      }
    }
  ];

  // Â∫îÁî®Âø´ÈÄüÊ®°Áâà
  const applyQuickTemplate = (template: typeof quickTemplates[0]) => {
    setProductInfo(prev => ({
      ...prev,
      ...template.data,
      regions: prev.regions // ‰øùÁïôÂ∑≤ÈÄâÊã©ÁöÑÂú∞Âå∫
    }));
    setShowQuickTemplates(false);
  };

  // Âü∫Á°ÄÂú∞Âå∫Êï∞ÊçÆÔºàÁÉ≠Èó®ÂàÜÁªÑÁ≠âÔºå‰øùÁïôÂéüÊúâÂ±ïÁ§∫È°∫Â∫èÔºâ
  const baseRegionGroups = [
    {
      name: 'üî• ÁÉ≠Èó®Âú∞Âå∫',
      regions: [
        { value: 'US', label: 'ÁæéÂõΩ', desc: 'ÂÖ®ÁêÉÊúÄÂ§ßÊ∂àË¥πÂ∏ÇÂú∫' },
        { value: 'JP', label: 'Êó•Êú¨', desc: 'È´òÊ∂àË¥π‰∫öÊ¥≤Â∏ÇÂú∫' },
        { value: 'KR', label: 'Èü©ÂõΩ', desc: 'Êó∂Â∞öÊΩÆÊµÅÂºïÈ¢ÜËÄÖ' },
        { value: 'SG', label: 'Êñ∞Âä†Âù°', desc: '‰∏úÂçó‰∫öÈó®Êà∑' },
        { value: 'GB', label: 'Ëã±ÂõΩ', desc: 'Ê¨ßÊ¥≤ÈáçË¶ÅÂ∏ÇÂú∫' },
        { value: 'DE', label: 'Âæ∑ÂõΩ', desc: 'Ê¨ßÊ¥≤ÁªèÊµéÂº∫ÂõΩ' },
        { value: 'FR', label: 'Ê≥ïÂõΩ', desc: 'Êó∂Â∞öÊ∂àË¥π‰∏≠ÂøÉ' },
        { value: 'AU', label: 'Êæ≥Â§ßÂà©‰∫ö', desc: 'Â§ßÊ¥ãÊ¥≤‰∏ªË¶ÅÂ∏ÇÂú∫' }
      ]
    },
    {
      name: 'üåè ‰∫öÂ§™Âú∞Âå∫',
      regions: [
        { value: 'IN', label: 'Âç∞Â∫¶', desc: 'Âø´ÈÄüÂ¢ûÈïøÂ∏ÇÂú∫' },
        { value: 'MY', label: 'È©¨Êù•Ë•ø‰∫ö', desc: 'Â§öÂÖÉÊñáÂåñÂ∏ÇÂú∫' },
        { value: 'TH', label: 'Ê≥∞ÂõΩ', desc: '‰∏úÂçó‰∫öÊ∂àË¥π‰∏≠ÂøÉ' },
        { value: 'VN', label: 'Ë∂äÂçó', desc: 'Êñ∞ÂÖ¥Ê∂àË¥πÂ∏ÇÂú∫' },
        { value: 'ID', label: 'Âç∞Â∫¶Â∞ºË•ø‰∫ö', desc: '‰∫∫Âè£Â§ßÂõΩ' },
        { value: 'PH', label: 'Ëè≤ÂæãÂÆæ', desc: 'Áæ§Â≤õÊ∂àË¥πÂ∏ÇÂú∫' },
        { value: 'TW', label: 'Âè∞Êπæ', desc: 'ÁπÅ‰Ωì‰∏≠ÊñáÂ∏ÇÂú∫' },
        { value: 'HK', label: 'È¶ôÊ∏Ø', desc: 'ÂõΩÈôÖÈáëËûç‰∏≠ÂøÉ' }
      ]
    },
    {
      name: 'üåç Ê¨ßÊ¥≤Âú∞Âå∫',
      regions: [
        { value: 'IT', label: 'ÊÑèÂ§ßÂà©', desc: 'Êó∂Â∞öËÆæËÆ°‰πãÈÉΩ' },
        { value: 'ES', label: 'Ë•øÁè≠Áâô', desc: '‰ºäÊØîÂà©‰∫öÂ∏ÇÂú∫' },
        { value: 'NL', label: 'Ëç∑ÂÖ∞', desc: 'Ê¨ßÊ¥≤Áâ©ÊµÅ‰∏≠ÂøÉ' },
        { value: 'SE', label: 'ÁëûÂÖ∏', desc: 'ÂåóÊ¨ßÂàõÊñ∞Â∏ÇÂú∫' },
        { value: 'NO', label: 'Êå™Â®Å', desc: 'È´òÊ∂àË¥πÂåóÊ¨ß' },
        { value: 'DK', label: '‰∏πÈ∫¶', desc: 'ËÆæËÆ°ÂàõÊÑè‰∏≠ÂøÉ' }
      ]
    },
    {
      name: 'üåé ÁæéÊ¥≤Âú∞Âå∫',
      regions: [
        { value: 'CA', label: 'Âä†ÊãøÂ§ß', desc: 'ÂåóÁæéÈáçË¶ÅÂ∏ÇÂú∫' },
        { value: 'MX', label: 'Â¢®Ë•øÂì•', desc: 'ÊãâÁæéÈó®Êà∑Â∏ÇÂú∫' },
        { value: 'BR', label: 'Â∑¥Ë•ø', desc: 'ÂçóÁæéÊúÄÂ§ßÂ∏ÇÂú∫' },
        { value: 'AR', label: 'ÈòøÊ†πÂª∑', desc: 'ÂçóÁæéÊ∂àË¥π‰∏≠ÂøÉ' }
      ]
    }
  ];

  // Ëá™Âä®ÂàÜÁªÑÔºàËûçÂêàÂü∫Á°ÄÂ±ïÁ§∫ÁªÑ + Êåâ REGIONS Êõ¥ÁªÜÂàÜÁöÑÂå∫ÂüüÔºâ
  const regionGroups = useMemo(() => {
    const autoGroups = getAutoRegionGroups(REGIONS);
    // Â∞ÜÂü∫Á°ÄÁªÑÊîæÂà∞È°∂ÈÉ®ÔºåÈöèÂêéÊãºÊé•Ëá™Âä®ÁªÑ‰∏≠Êú™Âá∫Áé∞ÁöÑÂâ©‰ΩôÁªÑÔºåÈÅøÂÖçÈáçÂ§ç
    const baseCodes = new Set(baseRegionGroups.flatMap(g => g.regions.map(r => r.value)));
    const merged = [...baseRegionGroups];
    autoGroups.forEach(g => {
      const filtered = g.regions.filter(r => !baseCodes.has(r.value));
      if (filtered.length) {
        merged.push({ name: g.name, regions: filtered });
      }
    });
    return merged;
  }, []);

  // Ëé∑ÂèñÂ∑≤ÈÄâÊã©Âú∞Âå∫ÁöÑÊòæÁ§∫ÊñáÊú¨
  const getSelectedRegionsText = () => {
    if (productInfo.regions.length === 0) {
      return 'ËØ∑ÈÄâÊã©ÊäïÊîæÂú∞Âå∫';
    }
    if (productInfo.regions.length === 1) {
      const region = regionGroups.flatMap(g => g.regions).find(r => r.value === productInfo.regions[0]);
      return region?.label || productInfo.regions[0];
    }
    return `Â∑≤ÈÄâÊã© ${productInfo.regions.length} ‰∏™Âú∞Âå∫`;
  };

  // ËøáÊª§Âú∞Âå∫Êï∞ÊçÆ
  const getFilteredRegionGroups = () => {
    if (!regionSearchTerm) return regionGroups;
    
    return regionGroups.map(group => ({
      ...group,
      regions: group.regions.filter(region => 
        region.label.toLowerCase().includes(regionSearchTerm.toLowerCase()) ||
        region.desc.toLowerCase().includes(regionSearchTerm.toLowerCase())
      )
    })).filter(group => group.regions.length > 0);
  };

  // Â§ÑÁêÜÂú∞Âå∫ÈÄâÊã©
  const handleRegionToggle = (regionValue: string) => {
    setProductInfo(prev => ({
      ...prev,
      regions: prev.regions.includes(regionValue)
        ? prev.regions.filter(r => r !== regionValue)
        : [...prev.regions, regionValue]
    }));
    setShowRegionError(false);
  };

  // Âà†Èô§Âçï‰∏™Â∑≤ÈÄâÂú∞Âå∫
  const handleRemoveRegion = (regionValue: string) => {
    setProductInfo(prev => ({
      ...prev,
      regions: prev.regions.filter(r => r !== regionValue)
    }));
  };

  // Ê†πÊçÆÂú∞Âå∫ÁºñÁ†ÅËé∑ÂèñÂêçÁß∞
  const getRegionLabel = (value: string) => {
    const region = regionGroups.flatMap(g => g.regions).find(r => r.value === value);
    return region ? region.label : value;
  };

  // Â§ÑÁêÜË°®ÂçïÊèê‰∫§
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (productInfo.regions.length === 0) {
      setShowRegionError(true);
      return;
    }
    
    onGenerate();
  };

  // Â§ÑÁêÜÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠‰∏ãÊãâËèúÂçï
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const dropdown = document.getElementById('region-dropdown');
      const templateDropdown = document.getElementById('template-dropdown');
      const button = event.target as HTMLElement;
      
      // ÂÖ≥Èó≠Âú∞Âå∫‰∏ãÊãâËèúÂçï
      if (dropdown && !dropdown.contains(button) && !button.closest('[data-region-toggle]')) {
        setShowRegionDropdown(false);
        setRegionSearchTerm('');
      }
      
      // ÂÖ≥Èó≠Âø´ÈÄüÊ®°Áâà‰∏ãÊãâËèúÂçï
      if (templateDropdown && !templateDropdown.contains(button) && !button.closest('[data-template-toggle]')) {
        setShowQuickTemplates(false);
      }
    };

    if (showRegionDropdown || showQuickTemplates) {
      document.addEventListener('click', handleClickOutside);
    }

    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  }, [showRegionDropdown, showQuickTemplates]);

  // ËÆ©‰∏ãÊãâÂú®Âà∞ËææÈ°∂ÈÉ®/Â∫ïÈÉ®Êó∂Â∞ÜÊªöÂä®‰º†ÈÄíÁªôÈ°µÈù¢ÔºåÈÅøÂÖç‚ÄúÂÉµÁ°¨‚ÄùÊÑü
  useEffect(() => {
    const attachScrollChain = (container: HTMLElement | null) => {
      if (!container) return () => {};

      const shouldChain = (el: HTMLElement, deltaY: number) => {
        const scrollTop = el.scrollTop;
        const maxScrollTop = el.scrollHeight - el.clientHeight;
        const atTop = scrollTop <= 0;
        const atBottom = scrollTop >= maxScrollTop - 1;
        return (deltaY < 0 && atTop) || (deltaY > 0 && atBottom);
      };

      const onWheel = (e: WheelEvent) => {
        if (shouldChain(container, e.deltaY)) {
          e.preventDefault();
          window.scrollBy({ top: e.deltaY, behavior: 'auto' });
        }
      };

      let startY = 0;
      const onTouchStart = (e: TouchEvent) => {
        if (e.touches && e.touches.length > 0) {
          startY = e.touches[0].clientY;
        }
      };
      const onTouchMove = (e: TouchEvent) => {
        if (!e.touches || e.touches.length === 0) return;
        const currentY = e.touches[0].clientY;
        const deltaY = startY - currentY; // ‰∏é wheel ÁöÑÊ≠£Ë¥ü‰øùÊåÅ‰∏ÄËá¥ÔºàÂêë‰∏äÊªë‰∏∫Ê≠£Ôºâ
        if (shouldChain(container, deltaY)) {
          e.preventDefault();
          window.scrollBy({ top: deltaY, behavior: 'auto' });
        }
      };

      container.addEventListener('wheel', onWheel, { passive: false });
      container.addEventListener('touchstart', onTouchStart, { passive: true });
      container.addEventListener('touchmove', onTouchMove, { passive: false });

      return () => {
        container.removeEventListener('wheel', onWheel as EventListener);
        container.removeEventListener('touchstart', onTouchStart as EventListener);
        container.removeEventListener('touchmove', onTouchMove as EventListener);
      };
    };

    const cleanups: Array<() => void> = [];
    if (showQuickTemplates) {
      cleanups.push(attachScrollChain(document.getElementById('template-dropdown')));
    }
    if (showRegionDropdown) {
      // Â∞ÜÊªöÂä®ÈìæË∑ØÁªëÂÆöÂà∞ÂÜÖÈÉ®ÂèØÊªöÂä®ÁöÑÂàóË°®ÂÆπÂô®ÔºåÈÅøÂÖçÂ§ñÂ±ÇÂÆπÂô®Êã¶Êà™ÂØºËá¥Êó†Ê≥ïÂêë‰∏äÊªöÂä®
      cleanups.push(attachScrollChain(document.getElementById('region-dropdown-list')));
    }

    return () => {
      cleanups.forEach(fn => fn && fn());
    };
  }, [showQuickTemplates, showRegionDropdown]);

  return (
    <section id="generator" className="py-14 lg:py-20 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <div className="text-center mb-10">
          <h2 className="text-4xl lg:text-6xl font-bold text-gray-900 mb-4">
            ÂºÄÂßãÂàõ‰Ωú
            <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"> ÁàÜÊ¨æÊñáÊ°à</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Âè™ÈúÄÂá†Ê≠•ÁÆÄÂçïÊìç‰ΩúÔºåAI Âç≥ÂèØ‰∏∫ÊÇ®ÁîüÊàê‰∏ì‰∏öÁöÑFacebookÂπøÂëäÊñáÊ°à
          </p>
        </div>

        <div className="grid lg:grid-cols-[40%_60%] gap-8 items-stretch">
          {/* ËæìÂÖ•Ë°®Âçï */}
          <div ref={leftCardRef} className={`bg-white rounded-3xl shadow-2xl p-8 lg:p-10 relative ${(showQuickTemplates || showRegionDropdown) ? 'overflow-visible' : 'overflow-hidden'} flex flex-col`}>
            {/* ËÉåÊôØË£ÖÈ•∞ */}
            <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-full -translate-y-16 translate-x-16"></div>
            
            <form onSubmit={handleSubmit} className="space-y-6 relative">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-gray-900">‰∫ßÂìÅ‰ø°ÊÅØ</h3>
                
                {/* üöÄ Âø´ÈÄüÊ®°ÁâàÊåâÈíÆ */}
                <div className="relative">
                  <button
                    type="button"
                    data-template-toggle
                    onClick={() => setShowQuickTemplates(!showQuickTemplates)}
                    className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white text-sm font-medium rounded-xl hover:from-purple-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg"
                  >
                    <span className="mr-2">‚ö°</span>
                    Âø´ÈÄüÊ®°Áâà
                    <svg className={`ml-2 w-4 h-4 transition-transform ${showQuickTemplates ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>

                  {/* Âø´ÈÄüÊ®°Áâà‰∏ãÊãâËèúÂçï */}
                  {showQuickTemplates && (
                    <div id="template-dropdown" className="absolute top-full left-0 mt-2 w-80 bg-white border border-gray-200 rounded-xl shadow-2xl z-40 max-h-96 overflow-y-auto">
                      <div className="p-4 border-b border-gray-100">
                        <h4 className="text-sm font-semibold text-gray-800">ÈÄâÊã©‰∫ßÂìÅÊ®°Áâà</h4>
                        <p className="text-xs text-gray-600 mt-1">Âø´ÈÄüÂ°´ÂÖÖ‰∫ßÂìÅ‰ø°ÊÅØÔºåÂºÄÂßãÂàõ‰Ωú</p>
                      </div>
                      <div className="p-2">
                        {quickTemplates.map((template) => (
                          <button
                            key={template.id}
                            type="button"
                            onClick={() => applyQuickTemplate(template)}
                            className="w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors group"
                          >
                            <div className="flex items-start">
                              <span className="text-2xl mr-3 group-hover:scale-110 transition-transform">{template.name.split(' ')[0]}</span>
                              <div className="flex-1">
                                <div className="text-sm font-medium text-gray-900 group-hover:text-blue-600 transition-colors">
                                  {template.name.substring(2)}
                                </div>
                                <div className="text-xs text-gray-600 mt-1 line-clamp-2">
                                  {template.data.features}
                                </div>
                                <div className="text-xs text-gray-500 mt-1">
                                  ÁõÆÊ†áÔºö{template.data.targetAudience.split('„ÄÅ')[0]}Á≠â
                                </div>
                              </div>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* ‰∫ßÂìÅÂêçÁß∞ */}
              <div className="space-y-2">
                <label className="block text-sm font-semibold text-gray-700">
                  ‰∫ßÂìÅÂêçÁß∞ <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={productInfo.name}
                    onChange={(e) => setProductInfo(prev => ({ ...prev, name: e.target.value }))}
                    onFocus={() => setFocusedField('name')}
                    onBlur={() => setFocusedField(null)}
                    className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 bg-gray-50 focus:bg-white focus:outline-none ${
                      focusedField === 'name' 
                        ? 'border-blue-500 shadow-lg shadow-blue-500/25' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    placeholder="‰æãÂ¶ÇÔºöÊô∫ËÉΩÊó†Á∫øËÄ≥Êú∫"
                    required
                  />
                </div>
              </div>

              {/* ‰∫ßÂìÅÁâπÊÄß */}
              <div className="space-y-2">
                <label className="block text-sm font-semibold text-gray-700">
                  ‰∫ßÂìÅÁâπÊÄß <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <textarea
                    value={productInfo.features}
                    onChange={(e) => setProductInfo(prev => ({ ...prev, features: e.target.value }))}
                    onFocus={() => setFocusedField('features')}
                    onBlur={() => setFocusedField(null)}
                    className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 bg-gray-50 focus:bg-white focus:outline-none resize-none ${
                      focusedField === 'features' 
                        ? 'border-blue-500 shadow-lg shadow-blue-500/25' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    rows={4}
                    placeholder="ÊèèËø∞‰∫ßÂìÅÁöÑ‰∏ªË¶ÅÁâπÁÇπÂíå‰ºòÂäøÔºå‰æãÂ¶ÇÔºö‰∏ªÂä®ÈôçÂô™„ÄÅÈïøÁª≠Ëà™„ÄÅÂø´ÈÄüÂÖÖÁîµ"
                    required
                  />
                </div>
              </div>

              {/* ÁõÆÊ†áÂèó‰ºó */}
              <div className="space-y-2">
                <label className="block text-sm font-semibold text-gray-700">
                  ÁõÆÊ†áÂèó‰ºó <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={productInfo.targetAudience}
                    onChange={(e) => setProductInfo(prev => ({ ...prev, targetAudience: e.target.value }))}
                    onFocus={() => setFocusedField('audience')}
                    onBlur={() => setFocusedField(null)}
                    className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 bg-gray-50 focus:bg-white focus:outline-none ${
                      focusedField === 'audience' 
                        ? 'border-blue-500 shadow-lg shadow-blue-500/25' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    placeholder="‰æãÂ¶ÇÔºöÂπ¥ËΩª‰∏äÁè≠Êóè„ÄÅÈü≥‰πêÁà±Â•ΩËÄÖ„ÄÅËøêÂä®ÂÅ•Ë∫´‰∫∫Áæ§"
                    required
                  />
                </div>
              </div>

              {/* ÊäïÊîæÂú∞Âå∫ */}
              <div className="space-y-2 relative">
                <label className="block text-sm font-semibold text-gray-700">
                  ÊäïÊîæÂú∞Âå∫ <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <button
                    type="button"
                    data-region-toggle
                    onClick={() => setShowRegionDropdown(!showRegionDropdown)}
                    className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 bg-gray-50 hover:bg-white text-left flex items-center justify-between ${
                      showRegionDropdown
                        ? 'border-blue-500 shadow-lg shadow-blue-500/25 bg-white'
                        : productInfo.regions.length === 0 && showRegionError
                        ? 'border-red-500'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <span className={productInfo.regions.length === 0 ? 'text-gray-500' : 'text-gray-900'}>
                      {getSelectedRegionsText()}
                    </span>
                    <svg 
                      className={`w-5 h-5 text-gray-400 transition-transform ${showRegionDropdown ? 'rotate-180' : ''}`} 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>

                  {/* ‰∏ãÊãâËèúÂçï */}
                  {showRegionDropdown && (
                    <div id="region-dropdown" className="absolute z-40 w-full mt-2 bg-white border border-gray-200 rounded-xl shadow-2xl max-h-96 overflow-hidden">
                      {/* ÊêúÁ¥¢Ê°Ü */}
                      <div className="p-4 border-b border-gray-100">
                        <input
                          type="text"
                          placeholder="ÊêúÁ¥¢Âú∞Âå∫..."
                          value={regionSearchTerm}
                          onChange={(e) => setRegionSearchTerm(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>

                      {/* Âú∞Âå∫ÂàóË°® */}
                      <div id="region-dropdown-list" className="max-h-80 overflow-y-auto">
                        {getFilteredRegionGroups().map((group, groupIndex) => (
                          <div key={group.name} className={groupIndex > 0 ? 'border-t border-gray-100' : ''}>
                            <div className="px-4 py-3 bg-gray-50">
                              <h4 className="text-sm font-semibold text-gray-700">{group.name}</h4>
                            </div>
                            <div className="p-2">
                              {group.regions.map((region) => (
                                <label key={region.value} className="flex items-center p-2 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors">
                                  <input
                                    type="checkbox"
                                    checked={productInfo.regions.includes(region.value)}
                                    onChange={() => handleRegionToggle(region.value)}
                                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                                  />
                                  <div className="ml-3">
                                    <div className="text-sm font-medium text-gray-900">{region.label}</div>
                                    <div className="text-xs text-gray-500">{region.desc}</div>
                                  </div>
                                </label>
                              ))}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                
                {showRegionError && productInfo.regions.length === 0 && (
                  <p className="text-sm text-red-500">ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™ÊäïÊîæÂú∞Âå∫</p>
                )}

                {/* Â∑≤ÈÄâÂú∞Âå∫Ê†áÁ≠æÊòæÁ§∫ÔºåÂèØÂçïÁã¨Âà†Èô§ */}
                {productInfo.regions.length > 0 && (
                  <div className="mt-3 flex flex-wrap gap-2">
                    {productInfo.regions.map(code => (
                      <span key={code} className="inline-flex items-center px-2.5 py-1 rounded-full text-sm bg-blue-50 text-blue-700 border border-blue-200">
                        <span className="mr-1">{getRegionLabel(code)}</span>
                        <button
                          type="button"
                          aria-label={`ÁßªÈô§${getRegionLabel(code)}`}
                          onClick={() => handleRemoveRegion(code)}
                          className="ml-1 text-blue-500 hover:text-blue-700"
                        >
                          √ó
                        </button>
                      </span>
                    ))}
                  </div>
                )}
              </div>

              {/* ÊñáÊ°àÈ£éÊ†ºÂíå‰øÉÈîÄÊñπÂºè */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="block text-sm font-semibold text-gray-700">
                    ÊñáÊ°àÈ£éÊ†º
                  </label>
                  <select
                    value={productInfo.style}
                    onChange={(e) => setProductInfo(prev => ({ ...prev, style: e.target.value }))}
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl bg-gray-50 focus:bg-white focus:border-blue-500 focus:outline-none transition-all duration-200"
                  >
                    <option value="confident">Ëá™‰ø°‰∏ì‰∏ö</option>
                    <option value="friendly">‰∫≤ÂàáÂèãÂ•Ω</option>
                    <option value="energetic">Ê¥ªÂäõÂõõÂ∞Ñ</option>
                    <option value="elegant">‰ºòÈõÖÁ≤æËá¥</option>
                    <option value="modern">Áé∞‰ª£Êó∂Â∞ö</option>
                    <option value="casual">ËΩªÊùæÈöèÊÑè</option>
                    <option value="luxury">Â•¢ÂçéÈ´òÁ´Ø</option>
                    <option value="humorous">ÂπΩÈªòÈ£éË∂£</option>
                  </select>
                </div>

                <div className="space-y-2">
                  <label className="block text-sm font-semibold text-gray-700">
                    ‰øÉÈîÄÊñπÂºè
                  </label>
                  <select
                    value={productInfo.promotion}
                    onChange={(e) => setProductInfo(prev => ({ ...prev, promotion: e.target.value }))}
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl bg-gray-50 focus:bg-white focus:border-blue-500 focus:outline-none transition-all duration-200"
                  >
                    <option value="discount">ÈôêÊó∂ÊäòÊâ£</option>
                    <option value="bundle">ÁªÑÂêà‰ºòÊÉ†</option>
                    <option value="flash">Èó™Ë¥≠‰øÉÈîÄ</option>
                    <option value="new">Êñ∞ÂìÅÈ¶ñÂèë</option>
                    <option value="seasonal">Â≠£ËäÇÁâπÊÉ†</option>
                    <option value="loyalty">‰ºöÂëò‰∏ì‰∫´</option>
                    <option value="none">Êó†‰øÉÈîÄ</option>
                  </select>
                </div>
              </div>

              {/* ÁîüÊàêÊåâÈíÆ */}
              <button
                type="submit"
                disabled={isLoading}
                className={`w-full py-4 px-6 rounded-xl font-semibold text-white transition-all duration-300 transform hover:scale-105 ${
                  isLoading
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl'
                }`}
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                    AI Ê≠£Âú®ÁîüÊàê‰∏≠...
                  </div>
                ) : (
                  'üöÄ ÁîüÊàêÊñáÊ°à+ÊïàÊûúÈ¢Ñ‰º∞'
                )}
              </button>
            </form>
          </div>

          {/* ËæìÂá∫ÁªìÊûú - ‰ΩøÁî®ÂÆåÊï¥ÁöÑ7.0ÁâàÊú¨OutputDisplayÁªÑ‰ª∂ */}
          <div ref={rightCardRef} className="bg-white rounded-3xl shadow-2xl p-2 relative overflow-hidden flex flex-col min-h-[600px]">
            {/* ËÉåÊôØË£ÖÈ•∞ */}
            <div className="absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-tr from-purple-500/10 to-pink-500/10 rounded-full translate-y-16 -translate-x-16"></div>
            
            <div className="relative flex-1 flex flex-col">
              <OutputDisplay
                copies={copies}
                regions={productInfo.regions}
                isLoading={isLoading}
                error={error}
                isForbiddenProduct={isForbiddenProduct}
                policyCheckResult={policyCheckResult}
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};
